** I used TA slide code and used an outside reference for learning
how to transpose a matrix. I credited both in my code**


Ambiguous puzzle:

Using;
| ?- tower(4, T, C). 
I got a ton of answers to the puzzle. I don't know how far it goes, 
but the given command was vague, so I expected this result (and
it was mentioned in the specs so that's why I tried it).

C = counts([4,2,2,1],[1,2,2,4],[4,2,2,1],[1,2,2,4])
T = [[1,2,3,4],[2,1,4,3],[3,4,1,2],[4,3,2,1]] ? ;

C = counts([4,2,2,1],[1,2,3,3],[4,2,2,1],[1,2,3,3])
T = [[1,2,3,4],[2,1,4,3],[3,4,2,1],[4,3,1,2]] ? ;

C = counts([3,3,2,1],[2,1,2,4],[4,2,1,2],[1,2,3,3])
T = [[1,2,3,4],[2,1,4,3],[4,3,1,2],[3,4,2,1]] ? ;

C = counts([3,3,2,1],[2,1,3,3],[4,2,1,2],[1,2,4,2])
T = [[1,2,3,4],[2,1,4,3],[4,3,2,1],[3,4,1,2]] ? ;

C = counts([4,3,2,1],[1,2,2,2],[4,3,2,1],[1,2,2,2])
T = [[1,2,3,4],[2,3,4,1],[3,4,1,2],[4,1,2,3]] ? ;

C = counts([3,3,2,1],[2,1,3,3],[4,3,1,2],[1,2,2,2])
T = [[1,2,3,4],[2,3,4,1],[4,1,2,3],[3,4,1,2]] ? ;

C = counts([4,2,2,1],[1,2,2,4],[4,2,2,1],[1,2,2,4])
T = [[1,2,3,4],[2,4,1,3],[3,1,4,2],[4,3,2,1]] ? ;

C = counts([3,2,2,1],[2,3,1,3],[4,2,1,2],[1,2,4,2])
T = [[1,2,3,4],[2,4,1,3],[4,3,2,1],[3,1,4,2]] ? ;

C = counts([3,2,2,1],[1,2,2,3],[4,2,2,1],[1,2,2,4])
T = [[1,2,3,4],[3,1,4,2],[2,4,1,3],[4,3,2,1]] ? 


//////////////////////////////////////////////////////

Speedup test results:

	Given test values of:
	tower(5, _, counts([2,3,2,1,4],[3,1,3,3,2],[4,1,2,5,2],
		[2,4,2,1,2]))
	and 
	plain_tower(5, _, counts([2,3,2,1,4],[3,1,3,3,2],
		[4,1,2,5,2],[2,4,2,1,2]))

I got a result of:
	| ?- speedup(Ratio).
	Ratio = 2.6898734177215191 ? ;
	(1938 ms) no
So it seems to be a 2x speedup. It was much faster with other edge values, 
but I chose these values because they are present in the project specs. 
For a 4x4 matrix I was able to get a 20x speedup, but I think a more 
complex matrix's result is a bit more impressive.




