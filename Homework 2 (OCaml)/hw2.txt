This assignment moderately destroyed my enjoyment of programming as a whole. However, assessing my work, I see places that I may have been able to improve the efficiency of the code and the ease of programming. However, rather than making it more efficient, I was focused on passing the sample tests. One of the major problems I ran into while coding was while I was attempting to use my matcherParser function with the make_parser function because I wanted to write less code, but make every function more concise. Unfortunately I was unable to use the matcherParser function for the make_parser function, so I just took pieces from the matcherParser function then integrated it into the treeParser function, which worked out decently but cost me a decent sum of sanity, time, and likely efficiency. However, the test cases still run relatively quick so it should not be too much of a problem. Another issue that is worth mentioning is my reliance on helper functions; these functions likely hinder the efficiency, but it makes it easier to isolate problems while debugging. And debugging in ocaml was another problem as well due to the complexity of the parse tree. For a small scale assignment like this, I did not see a problem with using them frequently, but if it was a large scale project then I would likely try to reduce the use of them. Another problem I had was the building of the parse tree which proved to be more of a headache than I had originally planned. 

As for my code’s weaknesses, the efficiency is clearly a problem should the scope of the program grow as it took a few extra seconds which would likely get worse. Additionally, my code might run into a stack overflow due to looping if the given grammar rules have nonterminals that call themselves. However, as I mentioned before, my priority was addressing the assigned points and getting the sample tests to pass rather than make some grand code; additionally, the specs say the grammar given is context free which does not cause problems in the scope of this problem. However, if the scope and scale of the project would have been larger, then I would have worked harder to get the make_parser and the make_matcher functions to use a shared helper function to preserve efficiency where I could. 

The simple test functions almost caused me more problems than a majority of the actual assignment coding. For the last homework’s little tests, it was much easier to modify the sample tests provided in the assignment specifications then test the functionality of the code I wrote. However, in the case of the this assignment, I had to create a brand new test using the general ideas from the sample tests; primarily the framework of setting the grammar rules. However, once I broke down the structure of a simple statement in English into smaller components (and stared at the sample tests for a few hours) , then I was able to translate it to a grammar that my code would be able to parse. 

_______________________
Resources used:
+ https://grammar.yourdictionary.com/grammar-rules-and-tips/basic-english-	grammar-rules.html - I used this website for making my hw2test.ml, it has been a while since I needed to break down a sentence structure to its basic components. Additionally, I intended to make my sentence structure different (than what was turned in), however I’m still not fluent enough with ocaml to do everything I want; I ended up having to use the hw2sample.ml file as a base for my test cases as I was very confused.

+ TA Amit Mondal’s slides - Helped clarify what parse trees actually are, ocaml basics, etc (mostly used weeks 1, 2 slide decks)

+ Ocaml books (“OCaml from the very beginning” and “More OCaml: Algorithms, Methods, and Diversions”, the course textbook also kind of helped; more conceptually than in application but helpful all the same) - These were extremely helpful in to learn the syntax for the nested style functions required for this hw. Maybe not required, but they make it much easier.
 
